package WorkWithString;
public class MyString {        //ссылочные типы данных, массив строк (прочитать)

//объявление полей
    private String s;
    
//конструктор
    public MyString (String s) {
      this.s = s;                         
    } 
//конструктор клонирования
    public MyString (MyString s) {
      this.s = s.s;                         
    } 
    
    
    
  
  //////////////////////////////////////////////////////////////////////////////////////////////////
 //                                         Задание а                                            //
////////////////////////////////////////////////////////////////////////////////////////////////// 
/* a. Выберите из предложения слово, которое располагается в центре
предложения, то есть символ, входящий в его состав, является цен-
тральным символом в предложении (с учетом пробелов). */
    
    public String [] CentralWord() {
        
//Объявление переменных
      String [] out = new String [2]; //массив для вывода
      String s1,s2; //вспомогательная строка и искомое слово
      int i; //параметр цикла
      int half; //номер середины строки
      int k; //вспомогательная переменная
      /* 
        k=0 - в середине строки буква
        k=1 - в середине строки пробел
        k=2 - в середине строки запятая 
      */
      boolean flag; //флаг для обозначения начала нового слова
      boolean flag1; //флаг для обозначения середины предлодения
      
//Инициализация вводных данных      
      s1="";
      s2="";
      flag = true;
      flag1 = false;

//Нахождение номера серединного символа в строке      
      if (s.length()% 2==1) half=(s.length()/2);
        else half=(-1)+s.length()/2;
      
//Определение вида символа
    if (s.charAt(half)==':') k=3;
      else  if (s.charAt(half)==',') k=2;
              else if (s.charAt(half)==' ') k=1;
                     else k=0;
                
//цикл для нахождения слова, символ которого находится на середине строки     
      for(i=0; i<s.length(); i++ ) 
      {  
        if ((s.charAt(i)==' ')||(s.charAt(i)==',')||(s.charAt(i)==':')) {
            flag=false;
            s1="";
            flag1=false;
        } else flag=true;
        if ((flag==true)&&(s.charAt(i)!='.')) s1=s1+s.charAt(i);
        if ( (i==half)&&(k==0 ) ) flag1=true;
        if (flag1==true) s2=s1;
      }
      
//возвращаем значение слова функции
      if (k==2) out[0]="запятая";
      if (k==1) out[0]="пробел";
      if (k==3) out[0]="двоеточие";
      if (k==0) out[0]="слово: ";
      out [1]=s2;
//отладка      
//return (s2+" "+(half+1)+" "+s.charAt(half)+" "+s.length());  
      
      return (out);  //"Задача a) В середине строки находится "
    }
////////////////////////////////////////////////////////////////////////////////    
    
   
    
    
    
    
  //////////////////////////////////////////////////////////////////////////////////////////////////
 //                                         Задание b                                            //
////////////////////////////////////////////////////////////////////////////////////////////////// 
/* b. Определите количество всех знаков препинания в данной строке. */
    
    public int KolvoZnak() {
      int i,j; //параметр цикла
      int k; //количество знаков препинания
   
//Инициализация множества знаков препинания и их количества      
      char[] a = {',','.',':','!','?'};
      k=0;

//цикл для подсчета количества знаков препинания      
      for(i=0; i<s.length(); i++ )
        for (j=0; j<5; j++) {
          if (s.charAt(i)==a[j]) k++;
        }
      
//вывод          
      return (k);    //"Задача b) Знаков препинания в данной строке: "+
    }
////////////////////////////////////////////////////////////////////////////////
    
    
    
    
    
    
    
  //////////////////////////////////////////////////////////////////////////////////////////////////
 //                                         Задание c                                            //
//////////////////////////////////////////////////////////////////////////////////////////////////  
/* c. Найдите длину первого слова в предложении, а затем выберите из предложения все слова той же длины.*/    
    
    public String[] WordsHowFirstWord () {
      String [] out = new String [3]; // массив для вывода
      String s1; //первое слово
      String s2,sk; //вспомогательная строка для записи слов и конечная строка
      int i; //параметр цикла
      int l,k; //длина первого слова и количество букв в слове
      boolean flag; //флаг найденого первого слова
      
      //Инициализация данных
      l=0;
      s1="";
      s2="";
      sk="";
      k=0;
      
      //Нахождение длины первого слова
      i=0;
      flag=false;
      while ((flag==false)&&(i<s.length())) {
        if ((s.charAt(i)!=' ')&&(s.charAt(i)!=',')&&(s.charAt(i)!=':')&&(s.charAt(i)!='.')) {
            l++;
            s1+=s.charAt(i);
        } else flag=true;
        i++;
      }
      
      //Выборка слов той же длины, что и первое
      for (i=l; i<s.length(); i++) {
        if ((s.charAt(i)==' ')||(s.charAt(i)==',')||(s.charAt(i)==':')||(s.charAt(i)=='.')) {
            if (k==l) sk=sk+s2+' ';
            s2="";
            k=0;
        } else {
              s2=s2+s.charAt(i);
              k++;
          }  
      }
      if ((k==l)||(i==s.length()-1)) sk=sk+s2+' ';
      if (sk=="") sk="таких слов нет.";
      
      //Вывод
        //return ("Задача с) Первое слово: "+s1+", его длина: "+l+"; слова такой же длины: "+sk);
      out[0]=s1;
      out[1]=""+l;
      out[2]=sk;
      return (out);
    }
////////////////////////////////////////////////////////////////////////////////    


    
}
